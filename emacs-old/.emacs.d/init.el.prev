;; Adjust garbage collection thresholds during startup, and thereafter
;; Taken from: https://github.com/purcell/emacs.d/blob/master/init.el

(setq normal-gc-cons-threshold (* 20 1024 1024))
(setq init-gc-cons-threshold (* 128 1024 1024))

(setq gc-cons-threshold init-gc-cons-threshold)
(add-hook 'emacs-startup-hook
          (lambda () (setq gc-cons-threshold normal-gc-cons-threshold)))

;; Start Emacs server
;; (server-start)

;; Emacs startup time and GC printing function
(defun ysz/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections and %d features loaded."
           (format "%.2f seconds"
                   (float-time
                    (time-subtract after-init-time before-init-time)))
           gcs-done (length features)))

;; Finally, add a hook to the startup process to execute the function
(add-hook 'emacs-startup-hook #'ysz/display-startup-time)

;; Get current desktop environment
(defun get-de-p ()
  "Get desktop environment."
  (interactive)
  (shell-command-to-string "echo $XDG_CURRENT_DESKTOP | tr -d '\n'"))

;; Emacs theme
;; (load-theme 'manoj-dark)

(if (display-graphic-p)
    (setq initial-frame-alist
          '(
            ;; (tool-bar-lines . 0)
            (width . 103)
            (height . 31)))
  ;; (background-color . "light cyan")))
  ;; (left . 50)
  ;; (top . 50)))
  (setq initial-frame-alist '( (tool-bar-lines . 0))))

(setq default-frame-alist
          '(
            ;; (tool-bar-lines . 0)
            (width . 103)
            (height . 31)))
            ;; (background-color . "light cyan")))
            ;; (left . 50)
            ;; (top . 50)))

;; Inhibit startup screen
(setq inhibit-startup-message t)

;; Load my custom Emacs functions from a file
(load (concat user-emacs-directory "my-functions"))

;; Add directory to `load-path' list
(add-to-list 'load-path "/home/yaslam/.emacs.d/lisp")

;; Set the default directory variable
(setq default-directory "~/")

;; Set the LANG environment variable for spell-checkers to use
;; the correct dictionary.
(setenv "LANG" "en_GB")

;; Setup TRAMP's default method
;; https://www.emacswiki.org/emacs/Tramp_on_Windows
(setq tramp-default-method "plink")

(scroll-bar-mode -1)			; Disable visible scrollbar
(tool-bar-mode -1)			; Disable the toolbar
(tooltip-mode 1)			; Disable tooltips

(if (display-graphic-p)
    (progn
      (set-fringe-mode 15)			; Give some breathing room
      ;; Top and bottom border
      (set-frame-parameter nil 'internal-border-width fringe-mode)))

(menu-bar-mode t)

;; (if (not (string-equal (get-de-p) ""))
;;     (progn
;;       ;; (menu-bar-mode 1)			; Enable the menu bar
;;       ;; (tool-bar-mode 1))
;;   (menu-bar-mode -1))			; Disable the menu bar

(column-number-mode)			; Show column number in modeline
(global-display-line-numbers-mode -1)	; Show line numbers globally

;; Save Emacs sessions or the "desktop" and revert after restart
;; (desktop-save-mode t)

(setq display-time-format "[%a, %b %d] (%H:%M %p)")

(setq display-time-day-and-date t)   ; Show day and date in modeline aswell.
(display-time-mode)			; Display system time in modeline

(unless (< emacs-major-version 29)
  (if (display-graphic-p)
      (pixel-scroll-precision-mode)))

;; Show matching parenthesis in programming modes
(add-hook 'prog-mode-hook (lambda () (show-paren-mode 1)))

;; Enable line numbers for some modes
(dolist (modes '(prog-mode-hook
		 conf-mode-hook
		 ahk-mode-hook
		 ibuffer-mode-hook
		 diff-mode-hook
		 notmuch-message-mode-hook
		 notmuch-show-mode-hook))
  (add-hook modes (lambda () (display-line-numbers-mode 1))))

;; Setup winner-mode for undoing and redoing window configuration
(winner-mode +1)
(define-key winner-mode-map (kbd "<M-left>") #'winner-undo)
(define-key winner-mode-map (kbd "<M-right>") #'winner-redo)

;; Electric pair mode, auto-insert matching brackets, quotes, etc..
;; (add-hook 'emacs-lisp-mode-hook (lambda () (electric-pair-mode t)))
;; (dolist (hook '(text-mode-hook
		;; org-mode-hook))
  ;; (add-hook hook (lambda () (electric-pair-mode nil))))

;; Setting variables for aspell to work correctly
(setq ispell-program-name "aspell")
;; (setq ispell-personal-dictionary "C:\msys64\mingw64\lib\aspell-0.60")

;; Turn abbrev mode on globally..
;; SEE EmacsWiki for how to do this on a mode-per-mode basis..
(setq-default abbrev-mode t)

;; Setting variables for abbrevs to work properly
;; https://www.emacswiki.org/emacs/AbbrevMode
;; http://xahlee.info/emacs/emacs/emacs_abbrev_mode_tutorial.html
(setq abbrev-file-name             ;; tell emacs where to read abbrev
      "~/.emacs.d/abbrev_defs")    ;; definitions from...

;; Fonts are set using M-x customize-face
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(auth-source-save-behavior nil)
 '(custom-safe-themes
   '("3319c893ff355a88b86ef630a74fad7f1211f006d54ce451aab91d35d018158f" "266ecb1511fa3513ed7992e6cd461756a895dcc5fef2d378f165fed1c894a78c" "7a7b1d475b42c1a0b61f3b1d1225dd249ffa1abb1b7f726aec59ac7ca3bf4dae" "d47f868fd34613bd1fc11721fe055f26fd163426a299d45ce69bef1f109e1e71" "850bb46cc41d8a28669f78b98db04a46053eca663db71a001b40288a9b36796c" "f91395598d4cb3e2ae6a2db8527ceb83fed79dbaf007f435de3e91e5bda485fb" "f6665ce2f7f56c5ed5d91ed5e7f6acb66ce44d0ef4acfaa3a42c7cfe9e9a9013" "cf922a7a5c514fad79c483048257c5d8f242b21987af0db813d3f0b138dfaf53" "846b3dc12d774794861d81d7d2dcdb9645f82423565bfb4dad01204fa322dbd5" "d268b67e0935b9ebc427cad88ded41e875abfcc27abd409726a92e55459e0d01" "fe2539ccf78f28c519541e37dc77115c6c7c2efcec18b970b16e4a4d2cd9891d" "4f1d2476c290eaa5d9ab9d13b60f2c0f1c8fa7703596fa91b235db7f99a9441b" "97db542a8a1731ef44b60bc97406c1eb7ed4528b0d7296997cbb53969df852d6" "66bdbe1c7016edfa0db7efd03bb09f9ded573ed392722fb099f6ac6c6aefce32" "745d03d647c4b118f671c49214420639cb3af7152e81f132478ed1c649d4597d" "613aedadd3b9e2554f39afe760708fc3285bf594f6447822dd29f947f0775d6c" "4b0e826f58b39e2ce2829fab8ca999bcdc076dec35187bf4e9a4b938cb5771dc" "353ffc8e6b53a91ac87b7e86bebc6796877a0b76ddfc15793e4d7880976132ae" "6c531d6c3dbc344045af7829a3a20a09929e6c41d7a7278963f7d3215139f6a7" "0d01e1e300fcafa34ba35d5cf0a21b3b23bc4053d388e352ae6a901994597ab1" "1d44ec8ec6ec6e6be32f2f73edf398620bb721afeed50f75df6b12ccff0fbb15" "6c98bc9f39e8f8fd6da5b9c74a624cbb3782b4be8abae8fd84cbc43053d7c175" "f0eb51d80f73b247eb03ab216f94e9f86177863fb7e48b44aacaddbfe3357cf1" "fa2b58bb98b62c3b8cf3b6f02f058ef7827a8e497125de0254f56e373abee088" "bffa9739ce0752a37d9b1eee78fc00ba159748f50dc328af4be661484848e476" "db5b906ccc66db25ccd23fc531a213a1afb500d717125d526d8ff67df768f2fc" "f490984d405f1a97418a92f478218b8e4bcc188cf353e5dd5d5acd2f8efd0790" "35c096aa0975d104688a9e59e28860f5af6bb4459fd692ed47557727848e6dfe" "2d035eb93f92384d11f18ed00930e5cc9964281915689fa035719cab71766a15" "5b8311648b1d33cdf8732024e4a6f2e538a3a70ec3d328159116bb38038509c3" "28a104f642d09d3e5c62ce3464ea2c143b9130167282ea97ddcc3607b381823f" "835868dcd17131ba8b9619d14c67c127aa18b90a82438c8613586331129dda63" "3d54650e34fa27561eb81fc3ceed504970cc553cfd37f46e8a80ec32254a3ec3" "c4063322b5011829f7fdd7509979b5823e8eea2abf1fe5572ec4b7af1dd78519" "5784d048e5a985627520beb8a101561b502a191b52fa401139f4dd20acb07607" "246a9596178bb806c5f41e5b571546bb6e0f4bd41a9da0df5dfbca7ec6e2250c" "4ba6aa8a2776688ef7fbf3eb2b5addfd86d6e8516a701e69720b705d0fbe7f08" default))
 '(minions-available-modes
   '((abbrev-mode)
     (auto-fill-mode)
     (auto-revert-mode)
     (auto-revert-tail-mode)
     (flyspell-mode)
     (font-lock-mode)
     (glasses-mode)
     (hide-ifdef-mode)
     (highlight-changes-mode)
     (outline-minor-mode)
     (overwrite-mode)
     (ruler-mode)
     (multiple-cursors-mode)))
 '(notmuch-mua-cite-function 'message-cite-original-without-signature)
 '(notmuch-search-oldest-first nil)
 '(org-fontify-whole-heading-line t)
 '(send-mail-function 'smtpmail-send-it)
 '(smtpmail-smtp-server "smtp.office365.com")
 '(smtpmail-smtp-service 25)
 '(warning-suppress-log-types '((use-package) (use-package)))
 '(warning-suppress-types '((use-package)))
 '(widget-image-enable nil))
 ;; '(warning-suppress-types '((comp))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(goggles-added ((t (:inherit highlight))))
 '(goggles-changed ((t (:inherit header-line-highlight))))
 '(goggles-removed ((t (:inherit lin-red :extend t)))))
 ;; '(highlight-indent-guides-character-face ((t (:foreground "gray28")))))

(put 'narrow-to-region 'disabled nil)

;; Use a variable-pitch font for specific Major modes
(dolist (mode '(org-mode-hook
		nov-mode-hook
		markdown-mode-hook
		gfm-mode-hook
		elfeed-show-mode-hook))
  (add-hook mode (lambda () (variable-pitch-mode -1))))

;; Turn on flyspell mode for some Major modes
;; (for on-the-fly spell checking)
;; (dolist (mode '(org-mode-hook
;; 		text-mode-hook
;; 		markdown-mode-hook
;; 		gfm-mode-hook))
;;   (add-hook mode (lambda () (flyspell-mode 1))))

;; Set up the visible bell
(setq visible-bell nil)

;; Make ESC quit prompts (breaks keybinds when in tty, see `esc-map')
;;(define-key key-translation-map (kbd "ESC") (kbd "C-g"))

;; Align text using a keybind
(global-set-key (kbd "C-x a a") 'align-regexp)

;; Toggle the tab bar
(global-set-key (kbd "C-c TAB") 'tab-bar-mode)

;; Toggle the menu bar
(global-set-key (kbd "C-Â¬") 'menu-bar-mode)

;; Right click menu on right click instead of default Ctrl+Right Click
;; (global-set-key (kbd "<mouse-3>") 'mouse-popup-menubar-stuff)
;; (global-set-key (kbd "<mouse-3>") 'tmm-menubar-mouse)

;; Ispell keybinds
;; (global-set-key (kbd "<f8>") 'ispell-word)
;; Toggle on-the-fly spell checking with flyspell
;; (global-set-key (kbd "C-`") 'flyspell-mode)

;; Recentering keybind
;; (global-set-key (kbd "C-l") 'recenter)

(global-set-key (kbd "C-:") 'other-window-kill-buffer)

;; Bookmark list
(global-set-key (kbd "C-c b") 'bookmark-bmenu-list)

;; Win-switch
;; (require 'win-switch)
;; (global-set-key (kbd "C-x o") 'win-switch-dispatch)

;; ;; Zen mode
;; ;; Distraction free writing environment.
;; ;; https://github.com/aki237/zen-mode
(require 'zen-mode)

;; Zen-mode keybind
(global-set-key (kbd "C-M-z") 'zen-mode)

;; Execute-extended-command bind for when in tty
(unless (display-graphic-p)
  (global-set-key (kbd "C-c x") 'execute-extended-command))

;; Turn off line-numbers when in zen-mode.
;; If line-numbers are already disabled, don't enable them in zen-mode, but re-enable
;; them when exiting zen-mode if the line-numbers where originally enabled.
(add-hook 'zen-mode-hook (lambda ()
			   (if zen-mode
			       (display-line-numbers-mode -1)
			     (display-line-numbers-mode 1))))

;; Make yes/no prompts be y/n prompts
(defalias 'yes-or-no-p 'y-or-n-p)

;; Disable spell-checking in yaml mode
(add-hook 'yaml-mode (lambda () ((wucuo-mode -1)
				 (writegood-mode -1))))

;; Turn on certain modes when a file with a specific file extension has
;; been opened by adding to the list in the variable `auto-mode-alist'.
;; https://www.emacswiki.org/emacs/AutoModeAlist#auto-mode-alist
(setq auto-mode-alist
      (append auto-mode-alist
	      '(("\\.artist\\'" . artist-mode)
		("\\.notes\\'" . org-mode)
		("\\.ebuild\\'" . sh-mode)
		("/.bash_aliases\\'" . sh-mode)
		("\\.gen'" . conf-mode)
		("^/etc/portage/package.accept_keywords/*" . conf-mode)
		("^/etc/portage/package.use/*" . conf-mode)
		("^/etc/*.conf" . conf-mode)
		("^/etc/ssh/*" . conf-mode)
		("\\.epub\\'" . nov-mode))))

;; Indentation guides
(add-hook 'prog-mode-hook 'highlight-indentation-mode)

;; Enabling eglot mode and company mode for specific programming languages.
(defun setup-ide-stuff ()
  "Minor modes that are useful when programming."
  (interactive)
  (eglot-ensure)
  (corfu-mode))

(dolist (hooks '(sh-mode-hook
		 python-mode-hook))
  (add-hook hooks 'setup-ide-stuff))

;; Testing higher fringe sizes..
;; https://bzg.fr/en/emacs-strip-tease/
;; A small minor mode to use a big fringe
(defvar bzg-big-fringe-mode nil)
(define-minor-mode bzg-big-fringe-mode
  "Minor mode to use big fringe in the current buffer."
  :init-value nil
  :global t
  :variable bzg-big-fringe-mode
  :group 'editing-basics
  (if (not bzg-big-fringe-mode)
      (set-fringe-style nil)
    (set-fringe-mode
     (/ (- (frame-pixel-width)
           (* 100 (frame-char-width)))
        3))))

;; Now activate this global minor mode
(bzg-big-fringe-mode -1)

;; See http://bzg.fr/emacs-hide-mode-line.html
(defvar-local hidden-mode-line-mode nil)
(defvar-local hide-mode-line nil)

(define-minor-mode hidden-mode-line-mode
  "Minor mode to hide the mode-line in the current buffer."
  :init-value nil
  :global nil
  :variable hidden-mode-line-mode
  :group 'editing-basics
  (if hidden-mode-line-mode
      (setq hide-mode-line mode-line-format
            mode-line-format nil)
    (setq mode-line-format hide-mode-line
          hide-mode-line nil))
  (force-mode-line-update)
  ;; Apparently force-mode-line-update is not always enough to
  ;; redisplay the mode-line
  (redraw-display)
  (when (and (called-interactively-p 'interactive)
             hidden-mode-line-mode)
    (run-with-idle-timer
     0 nil 'message
     (concat "Hidden Mode Line Mode enabled.  "
             "Use M-x hidden-mode-line-mode to make the mode-line appear."))))

;; Activate hidden-mode-line-mode
(global-set-key (kbd "C-s-SPC") (hidden-mode-line-mode 1))

(defun ysz/kill-this-buffer ()
  "Kill THIS buffer."
  (interactive)
  (kill-buffer (current-buffer)))

(define-key global-map (kbd "C-x k") 'ysz/kill-this-buffer)

(defun ysz/right-margin-set ()
  "Set the right margin size and do some styling on it."
  (interactive)
  ;; Also set the window divider
  (modify-all-frames-parameters
   '((right-divider-width . 15)))

  ;; Styling for the window divider
  (dolist (face '(window-divider
		  window-divider-first-pixel
		  window-divider-last-pixel))
    (face-spec-reset-face face)
    (set-face-foreground face (face-attribute 'default :background))
  (set-face-background 'fringe (face-attribute 'default :background))))

(defun ysz/right-margin-change ()
  "Apply right margin changes from the `ysz/right-margin-set' function."
  (interactive)
  (if (display-graphic-p)
      (progn
	;; To be called on startup
	(ysz/right-margin-set))))

	;;; For modus-themes
;; For the right margin customizations to be applied when
;; changing modus themes from one to the other.
;; (add-hook 'modus-themes-after-load-theme-hook (lambda () (ysz/right-margin-set))))))

;; Quicker window navigation
;; With S-<UDLR>
(windmove-default-keybindings)
;; For terminal
(global-set-key (kbd "C-c <left>")  'windmove-left)
(global-set-key (kbd "C-c <right>") 'windmove-right)
(global-set-key (kbd "C-c <up>")    'windmove-up)
(global-set-key (kbd "C-c <down>")  'windmove-down)

;; Loading in ropemacs, python refactoring library for Emacs..
;; https://github.com/python-rope/ropemacs
;; (setq ropemacs-enable-shortcuts nil)
;; (setq ropemacs-local-prefix "C-c C-p")

;; (require 'pymacs)
;; (pymacs-load "ropemacs" "rope-")

;; +------------------------------------------------------+
;; |    Initial setup for straight.el and use-package.    |
;; +------------------------------------------------------+

;; Set some variables for straight.el
(setq straight-use-package-by-default t)

;; Bootstrap straight.el
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))

;; Use-package imenu support for navigating between `use-package' declarations
;; with imenu.
(setq use-package-enable-imenu-support t)

;; Use straight-use-package for use-package
(straight-use-package 'use-package)

;; Compute use-package statistics on package load time and other things.
(setq use-package-compute-statistics t)

;;; +---------------------------------------------+
;;; |    Packages Installation & Configuration    |
;;; +---------------------------------------------+

;; Fontaine -- font presets
;; https://protesilaos.com/emacs/fontaine#h:031b9bea-d42b-4be0-82c7-42712cde94cc
(use-package fontaine
  :config
  (setq fontaine-presets '((regular
			    :default-family "Iosevka Comfy"
			    :default-weight normal
			    :default-height 140
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    :variable-pitch-family "Iosevka Comfy Duo"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family nil ; use whatever the underlying face has
			    :bold-weight bold
			    ;; :italic-family "Comic Mono"
			    ;; :italic-slant italic
			    :line-spacing 1
			    )
			   (large
			    :default-family "Iosevka Comfy"
			    :default-weight normal
			    :default-height 160
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    :variable-pitch-family "Iosevka Comfy Duo"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family nil ; use whatever the underlying face has
			    :bold-weight bold
			    ;; :italic-family "Comic Mono"
			    ;; :italic-slant italic
			    :line-spacing 1
			    )
			   (comic-regular
			    :default-family "Comic Mono"
			    :default-weight normal
			    :default-height 140
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    :variable-pitch-family "Comic Sans MS"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family "Comic Mono Bold"
			    :bold-weight bold
			    :italic-family "Comic Mono"
			    :italic-slant italic
			    :line-spacing 1
			    )
			   (comic-large
			    :default-family "Comic Mono"
			    :default-weight normal
			    :default-height 160
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    :variable-pitch-family "Comic Sans MS"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family "Comic Mono Bold"
			    :bold-weight bold
			    :italic-family "Comic Mono"
			    :italic-slant italic
			    :line-spacing 1
			    )
			   (sourcecode-regular
			    :default-family "Source Code Pro"
			    :default-weight normal
			    :default-height 140
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    ;; :variable-pitch-family "Source Sans Pro"
			    :variable-pitch-family "Source Code Variable"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family "Source Code Pro"
			    :bold-weight bold
			    :italic-family "Source Code Pro"
			    :italic-slant italic
			    :line-spacing 1
			    )
			   (sourcecode-large
			    :default-family "Source Code Pro NF"
			    :default-weight normal
			    :default-height 160
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    ;; :variable-pitch-family "Source Sans Pro"
			    :variable-pitch-family "Source Code Variable"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family "Source Code Pro"
			    :bold-weight bold
			    :italic-family "Source Code Pro"
			    :italic-slant italic
			    :line-spacing 1
			    )
			   (saucecode-regular
			    :default-family "Sauce Code Pro NF"
			    :default-weight normal
			    :default-height 140
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    ;; :variable-pitch-family "Source Sans Pro"
			    :variable-pitch-family "Source Code Variable"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family "Sauce Code Pro NF"
			    :bold-weight bold
			    :italic-family "Sauce Code Pro NF"
			    :italic-slant italic
			    :line-spacing 1
			    )
			   (saucecode-large
			    :default-family "Sauce Code Pro NF"
			    :default-weight normal
			    :default-height 160
			    :fixed-pitch-family nil
			    :fixed-pitch-weight nil
			    :fixed-pitch-height nil
			    ;; :variable-pitch-family "Source Sans Pro"
			    :variable-pitch-family "Source Code Variable"
			    :variable-pitch-weight normal
			    :variable-pitch-height 1.0
			    :bold-family "Sauce Code Pro NF"
			    :bold-weight bold
			    :italic-family "Saurce Code Pro NF"
			    :italic-slant italic
			    :line-spacing 1
			    )
			   ))
  (if (string-equal (get-de-p) "")
      (fontaine-set-preset 'saucecode-large)
    (fontaine-set-preset 'saucecode-regular)))

;; Install and setup the multiple-cursors package
;; for using multiple cursors in Emacs.
;; https://github.com/magnars/multiple-cursors.el
(use-package multiple-cursors
  :preface
  (setq mc/max-cursors 10)
  :bind (("C-S-c C-S-c" . mc/edit-lines)
	 ("C->"		. mc/mark-next-like-this)
	 ("C-<"         . mc/mark-previous-like-this)
	 ("C-c C-<"     . mc/mark-all-like-this)
	 ("C-)"         . mc/cycle-forward)
	 ("C-("         . mc/cycle-backward)
	 :map mc/keymap
         ("<escape>" . mc/keyboard-quit)))

;; Install and setup the magit package
;; for a magical interface to git in Emacs.
;; https://magit.vc/
(use-package magit
  :commands (magit-status magit))

;; Setup the diff-hl package
;; for highlighting git diffs in the margin.
;; https://github.com/dgutov/diff-hl
(use-package diff-hl
  :commands (diff-hl-mode)
  :config
  (global-diff-hl-mode)
  (add-hook 'magit-pre-refresh-hook 'diff-hl-magit-pre-refresh)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)

  (setq diff-hl-margin-mode t))

;; Setup the lin package for
;; different line highlighting for specific modes..
;; https://github.com/protesilaos/lin
(use-package lin
  :straight (lin :type git :host github :repo "protesilaos/lin")
  :config

  (defun ysz/lin-mode-enforce-hl-line ()
    (unless hl-line-mode
      (hl-line-mode))
    (lin-mode))

  (dolist (hook '(elfeed-search-mode-hook
                  notmuch-search-mode-hook
                  org-agenda-mode-hook
                  magit-mode-hook
                  magit-log-mode-hook
                  ibuffer-mode-hook
		  deft-mode-hook))
    (add-hook hook #'ysz/lin-mode-enforce-hl-line)
    ;; (set-face-attribute 'lin-hl nil
    ;;                     :background "#32cd32"
    ;;                     :foreground "#000000")
    (setq lin-face 'lin-green-override-fg)
    ))

;; Fancy bullet icons in Org-mode
(use-package org-superstar
  :commands org-superstar-mode)

;; Set up the org mode package for an alternative markdown language
;; that has Emacs integration and support for TODOs, agendas, etc..
;; https://orgmode.org
(use-package org
  :commands (org-capture org-agenda)
  :hook ((org-mode . display-line-numbers-mode)
	 (org-mode . auto-fill-mode)
         (org-mode . org-indent-mode))
  :bind (("C-c l" . org-store-link)
	 ("C-c a" . org-agenda)
	 ("C-c c" . org-capture)
	 ("C-c g g" . org-capture-goto-file)
	 ("C-c g j" . org-goto-journal)
	 ("C-c g t" . org-goto-gtd-dir)
	 (:map org-mode-map
	       ("<double-mouse-1>" . org-cycle)
	       ("<f8>" . org-tree-slide-mode)
	       ("S-<f8>" . org-tree-slide-skip-done-toggle)
	       ("C-c s a" . ag)
	       ("C-c h e" . org-encrypt-entry)
	       ("C-c h d" . org-decrypt-entry)
	       ("M-n" . org-next-item)
	       ("M-p" . org-previous-item)))
  :config
  (visual-line-mode 1)
  ;; Improve org mode looks
  (setq org-startup-folded t)
  (setq org-startup-with-inline-images t)
  (setq org-image-actual-width '(600))
  (setq org-startup-indented nil)
  (setq org-pretty-entities nil)
  (setq org-hide-emphasis-markers nil)
  (setq org-hide-leading-stars nil)
  ;; Don't align tags
  (setq org-auto-align-tags t)
  ;; For navigation in the `org-goto' buffer
  (setq org-goto-auto-isearch nil)
  ;; Set org files directory
  (setq org-directory "~/Documents/GTD")
  ;; Set org agenda files location
  (setq org-agenda-files '("~/Documents/GTD/Tasks"
			   "~/Documents/GTD/Bills"))
  ;; Org fancy bullet points and headings
  (add-hook 'org-mode-hook (lambda () (if (display-graphic-p)
                                          (org-superstar-mode 1))))
  ;; Disable leading stars
  (setq org-superstar-remove-leading-stars t)
  ;; Org fold workaround for strange behaviour https://list.orgmode.org/87sfplyko3.fsf@localhost/
  ;; (setq org-fold-core-style 'overlays)
  ;; Indentation
  ;; (setq org-indent-mode t)

  ;;; Setting up `org-crypt'
  (org-crypt-use-before-save-magic)

  (setq org-tags-exclude-from-inheritance '("crypt"))
  
  ;; Org encryption key
  (setq org-crypt-key "Yusef Password Store")

  (setq auto-save-default nil)

  ;; ;; Use fixed pitch font for certain things
  ;; (defun set-buffer-variable-pitch ()
  ;;   "Set variable pitch, but set fixed-pitch for tables etc.."
  ;;   (interactive)
  ;;   (variable-pitch-mode t)
  ;;   (display-line-numbers-mode t)
  ;;   (set-face-attribute 'org-table nil :inherit 'fixed-pitch)
  ;;   (set-face-attribute 'org-code nil :inherit 'fixed-pitch)
  ;;   (set-face-attribute 'org-block nil :inherit 'fixed-pitch))

  ;; (add-hook 'org-mode-hook 'set-buffer-variable-pitch)

  ;; Configuring Org Babel
  (org-babel-do-load-languages 'org-babel-load-languages
			       '((shell . t)))
  ;; Disable confirmation before evaluating code blocks:
  ;; WARNING: This could lead to accidental evaluation of dangerous code.
  (setq org-confirm-babel-evaluate nil)
  
  ;; Configuring Org Capture Templates
  ;; https://orgmode.org/manual/Capture-templates.html
  ;; https://orgmode.org/manual/Template-elements.html
  ;; http://howardism.org/Technical/Emacs/capturing-intro.html
  (setq org-capture-templates
	'(("t" "Todo" entry (file+headline "~/Documents/GTD/Tasks/gtd.org" "Tasks")
           "* TODO %?\n  %i\n  %a")
	  ("n" "Notes" plain (file "~/.notes")
	   "\n* ENTER NOTE TITLE HERE%?\n")
	  ("r" "Random Note" plain (file "~/.notes")
	   "\n* Random Note\n%?"
	   :empty-lines 0)
	  ("p" "Project Idea" plain (file "~/Documents/GTD/Tasks/projects.org")
	   "\n* TODO (ENTER PROJECT NAME HERE)%?\n")
	  ("b" "Bills & Payments" plain (file "~/Documents/GTD/Bills/Bills.org")
	   "\n* Bills & Payments\n** %?")
	  ("j" "Journal" entry (file+headline "~/Documents/Journal/journal.org"
					      "Personal Thoughts")
	   "* %U :crypt:\n%?"
	   :jump-to-captured t)
	  ("x" "Trashbin" entry (file+headline "~/.notes"
					       "Trashbin")
	   "* %U\n%?"
	   :jump-to-captured t))))


;; Org tree-slide
;; Presentations in Org-mode inside Emacs.
;; https://github.com/takaxp/org-tree-slide
(use-package org-tree-slide
  :commands org-tree-slide-mode
  :bind ((:map org-tree-slide-mode-map
	       ("<f10>" . org-tree-slide-move-previous-tree)
	       ("<f12>" . org-tree-slide-move-next-tree)
	       ("<f11>" . org-tree-slide-content)))
  :config
  ;; Use #+title: in Org buffers as titles of presentations.
  (setq org-tree-slide-title t))

;; Install and setup the markdown-mode package
;; for adding a markdown mode into Emacs for editing
;; markdown files.
;; https://jblevins.org/projects/markdown-mode/
(use-package markdown-mode
  :commands (markdown-mode gfm-mode)
  :mode (("README\\.md\\'" . gfm-mode)
	 ("\\.md\\'" . markdown-mode)
	 ("\\.markdown\\'" . markdown-mode))
  :hook ((markdown-mode . visual-line-mode)
	 (gfm-mode . visual-line-mode))
  :init
  (setq markdown-command "pandoc"))

;; Install the helpful package which enhances the Emacs help buffers
;; and provides more information in them.
;; https://github.com/Wilfred/helpful
(use-package helpful
  :bind (("C-h f"   . helpful-callable)
	 ("C-h v"   . helpful-variable)
	 ("C-h k"   . helpful-key)
	 ("C-h F"   . helpful-function)
	 ("C-c C-d" . helpful-at-point)
	 ("C-h C"   . helpful-command)))

;; Install the notmuch package for viewing indexed emails
;; using notmuch CLI from within Emacs.
;; If installing from MELPA, you have to use the git version
;; of notmuch CLI, or errors will occur..
;; https://notmuchmail.org/notmuch-emacs/
;; https://github.com/notmuch/notmuch
(use-package notmuch
  :bind (("C-c e e" . notmuch))
  :config
  (setq mail-host-address "YUZi54780@outlook.com")
  (setq user-full-name "Yusef Aslam")
  (setq user-mail-adress "YUZi54780@outlook.com")
  (setq mail-user-agent 'message-user-agent)
  (setq message-kill-buffer-on-exit t)
  (setq notmuch-fcc-dirs "sent"))

;; Load the org-notmuch.el for Org-mode and Notmuch integration
;; functions, these aren't included in Emacs or MELPA/ELPA.
;; (load-file (concat user-emacs-directory "el-files/org-notmuch.el"))

;; Visualize the maildir in Notmuch hello buffer..
;; https://git.sr.ht/~tarsius/notmuch-maildir
(use-package notmuch-maildir
  :after notmuch
  :hook ((notmuch-hello-mode . notmuch-maildir-inject-section)))

;; Vertico minimal and performant completion UI.
;; https://github.com/minad/vertico
(use-package vertico
  ;; :bind
  ;; ((:map vertico-map
	 ;; ("C-j" . vertico-next)
	 ;; ("C-k" . vertico-previous)))
  :init
  (vertico-mode)

  ;; Different scroll margin
  ;; (setq vertico-scroll-margin 0)

  ;; Show more candidates
  ;; (setq vertico-count 20)

  ;; Grow and shrink the Vertico minibuffer
  ;; (setq vertico-resize t)

  ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
  ;; (setq vertico-cycle t)
  )

;;; Configuring vertico extensions

(use-package vertico-repeat
  :after vertico
  :demand t
  :straight nil
  :load-path "straight/repos/vertico/extensions/"
  :bind ((:map global-map
	       ("C-x C-z" . vertico-repeat)))
  :init
  (add-hook 'minibuffer-setup-hook #'vertico-repeat-save))

(use-package vertico-multiform
  :after vertico
  :demand t
  :straight nil
  :load-path "straight/repos/vertico/extensions/"
  :bind ((:map vertico-map
	       ("M-F" . vertico-multiform-flat)
	       ("M-G" . vertico-multiform-grid)
	       ("M-B" . vertico-multiform-buffer)
	       ("M-D" . vertico-multiform-unobtrusive)))
  :config
  (setq vertico-multiform-commands
	'((consult-imenu buffer)
	  (execute-extended-command flat)))

  (vertico-multiform-mode))

(use-package vertico-flat
  :after vertico
  :demand t
  :straight nil
  :load-path "straight/repos/vertico/extensions/")

(use-package vertico-grid
  :after vertico
  :demand t
  :straight nil
  :load-path "straight/repos/vertico/extensions/")

(use-package vertico-buffer
  :after vertico
  :demand t
  :straight nil
  :load-path "straight/repos/vertico/extensions/")

(use-package vertico-unobtrusive
  :after vertico
  :demand t
  :straight nil
  :load-path "straight/repos/vertico/extensions/")

;; Persist history over Emacs restarts. Vertico sorts by history position.
(use-package savehist
  :init
  (savehist-mode)
  :config
  (add-to-list 'savehist-additional-variables 'vertico-repeat-history))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Emacs 28: Hide commands in M-x which do not work in the current mode.
  ;; Vertico commands are hidden in normal buffers.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable recursive minibuffers
  (setq enable-recursive-minibuffers t))

(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless basic)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))

;; Install the consult package for enhancing the
;; default Emacs commands that use the `completing-read'
;; completion function.
;; https://github.com/minad/consult
;; https://github.com/minad/consult#use-package-example
(use-package consult
  :bind (("C-x b" . consult-buffer)
	 ("C-c i" . consult-imenu)
         ("M-y" . consult-yank-pop))
  :hook (completion-list-mode . consult-preview-at-point-mode)
  :config
  ;; Show less things in `consult-buffer'.
  (setq consult-buffer-sources (quote (consult--source-hidden-buffer consult--source-buffer consult--source-recent-file)))
)

;; Install the ctrlf package
;; that makes Emacs "finally learn how to Ctrl+f"
;; it replaces Isearch with an enhanced search that has better UI
;; and usability.
;; https://github.com/raxod502/ctrlf
(use-package ctrlf
  :demand t
  :bind ((:map ctrlf-mode-map
               ;; ("<right>" . ctrlf-forward-fuzzy)
               ;; ("<left>" . ctrlf-backward-fuzzy)
               ("C-s" . ctrlf-forward-default)
               ("C-r" . ctrlf-backward-default)
               ("M-s _" . ctrlf-forward-symbol)
               ("M-s ." . ctrlf-forward-symbol-at-point))
	 (:map ctrlf-minibuffer-mode-map
               ("M->" . ctrlf-last-match)
               ("M-<" . ctrlf-first-match)
               ("C-v" . ctrlf-next-page)
               ("M-v" . ctrlf-previous-page)
	       ("C-g" . ctrlf-cancel))	; Isearch-like behaviour
	 (:map view-mode-map
	       ("s" . ctrlf-forward-default)
	       ("r" . ctrlf-backward-default)))
  :config
  (ctrlf-mode +1))

;; Pulsar package
;; Flash line after some function has executed.
;; https://protesilaos.com/emacs/pulsar#h:96289426-8480-4ea6-9053-280348adc0ed
(use-package pulsar
  :demand t
  :bind (("C-x l" . pulsar-pulse-line)
	 ("C-x L" . pulsar-highlight-line))
  :config
  (setq pulsar-pulse-functions
	;; NOTE 2022-04-09: The commented out functions are from before
	;; the introduction of `pulsar-pulse-on-window-change'.  Try that
	;; instead.
	'(recenter-top-bottom
          move-to-window-line-top-bottom
          reposition-window
          ;; bookmark-jump
          ;; other-window
          ;; delete-window
          delete-other-windows ; this was originally commented out
          forward-page
          backward-page
          scroll-up-command
          scroll-down-command
          ;; windmove-right
          ;; windmove-left
          ;; windmove-up
          ;; windmove-down
          ;; windmove-swap-states-right
          ;; windmove-swap-states-left
          ;; windmove-swap-states-up
          ;; windmove-swap-states-down
          ;; tab-new
          ;; tab-close
          ;; tab-next
          org-next-visible-heading
          org-previous-visible-heading
          org-forward-heading-same-level
          org-backward-heading-same-level
          outline-backward-same-level
          outline-forward-same-level
          outline-next-visible-heading
          outline-previous-visible-heading
          outline-up-heading))
  
  (setq pulsar-pulse-on-window-change t)
  (setq pulsar-pulse t)
  (setq pulsar-delay 0.055)
  (setq pulsar-iterations 10)
  (setq pulsar-face 'pulsar-magenta)
  (setq pulsar-highlight-face 'pulsar-yellow)
  
  (pulsar-global-mode t))

;; Install the command-log-mode package
;; for logging the keybinds used and which
;; functions they call.
(use-package command-log-mode
  :config
  (global-command-log-mode))
;; Testing the modus themes package (they are already built-in to Emacs)

;; (use-package emacs
;;   :bind ("<f12>" . modus-themes-toggle)
;;   :init
;;   ;; Add all your customizations prior to loading the themes
;;   (setq modus-themes-italic-constructs t
;;         modus-themes-bold-constructs nil
;;         modus-themes-region '(bg-only no-extend))

;;   ;; More customizations
;;   ;; https://github.com/protesilaos/modus-themes/
;;   (setq
;;   ;; Options for `modus-themes-mode-line' are either nil, or a list
;;   ;; that can combine any of `3d' OR `moody', `borderless',
;;   ;; `accented', a natural number for extra padding (or a cons cell
;;   ;; of padding and NATNUM), and a floating point for the height of
;;   ;; the text relative to the base font size (or a cons cell of
;;   ;; height and FLOAT)
;;    modus-themes-mode-line '(accented borderless (padding . 4) (height . 1.0))

;;    ;; Options for `modus-themes-hl-line' are either nil (the default),
;;    ;; or a list of properties that may include any of those symbols:
;;    ;; `accented', `underline', `intense'
;;    modus-themes-hl-line '(underline accented)

;;    ;; The `modus-themes-completions' is an alist that reads three
;;    ;; keys: `matches', `selection', `popup'.  Each accepts a nil
;;    ;; value (or empty list) or a list of properties that can include
;;    ;; any of the following (for WEIGHT read further below):
;;    ;;
;;    ;; `matches' - `background', `intense', `underline', `italic', WEIGHT
;;    ;; `selection' - `accented', `intense', `underline', `italic', `text-also' WEIGHT
;;    ;; `popup' - same as `selected'
;;    ;; `t' - applies to any key not explicitly referenced (check docs)
;;    ;;
;;    ;; WEIGHT is a symbol such as `semibold', `light', or anything
;;    ;; covered in `modus-themes-weights'.  Bold is used in the absence
;;    ;; of an explicit WEIGHT.
;;    modus-themes-completions '((matches . (extrabold))
;;                               (selection . (semibold accented))
;;                               (popup . (accented intense)))

;;    ;; Options for `modus-themes-region' are either nil (the default),
;;    ;; or a list of properties that may include any of those symbols:
;;    ;; `no-extend', `bg-only', `accented'
;;    modus-themes-region '(bg-only no-extend)

;;    modus-themes-org-blocks 'gray-background ; {nil,'gray-background,'tinted-background}

;;    modus-themes-org-agenda ; this is an alist: read the manual or its doc string
;;    '((header-block . (variable-pitch 1.3))
;;      (header-date . (grayscale workaholic bold-today 1.1))
;;      (event . (accented varied))
;;      (scheduled . uniform)
;;      (habit . traffic-light))

;;    ;; Options for `modus-themes-lang-checkers' are either nil (the
;;    ;; default), or a list of properties that may include any of those
;;    ;; symbols: `straight-underline', `text-also', `background',
;;    ;; `intense' OR `faint'.
;;    modus-themes-lang-checkers (quote (straight-underline intense))

;;    modus-themes-headings ; this is an alist: read the manual or its doc string
;;    '((1 . (overline background variable-pitch 1.1))
;;      (2 . (rainbow 1.08))
;;      (t . (semibold)))
;;    )

;;   :config
;;   ;; Load the theme of your choice:
;;   ;; (load-theme 'modus-operandi)
;;   ; OR (load-theme 'modus-vivendi)

;;   ;; Some customizations not specific to modus themes
;;   (if (display-graphic-p)
;;       (progn
;; 	;; To be called on startup
;; 	(ysz/right-margin-set)
;; 	;; For the right margin customizations to be applied when
;; 	;; changing modus themes from one to the other.
;; 	(add-hook 'modus-themes-after-load-theme-hook (lambda () (ysz/right-margin-set))))))

(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  
  (load-theme 'doom-one t)

  (ysz/right-margin-change)

  ;; Enable flashing mode-line on errors
  ;; (doom-themes-visual-bell-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))

;; Doom modeline
(use-package doom-modeline
  :init
  (doom-modeline-mode 1))

;; Major mode for editing docker-compose files
;; https://github.com/meqif/docker-compose-mode
(use-package docker-compose-mode
  :commands (docker-compose-mode))

;; Install the wgrep package to make edits across multiple files when doing M-x grep
(use-package wgrep
  :commands (wgrep-change-to-wgrep-mode))

;; Install fzf for Emacs
;; https://github.com/bling/fzf.el
(use-package fzf
  :commands (fzf))

;; Hide minor modes inside a menu in the modeline.
;; (use-package minions
;;   :init
;;   (add-to-list 'minions-prominent-modes (quote (multiple-cursors-mode)))
;;   :config
;;   (minions-mode))

;; Garbage collector magic hack
;; https://github.com/emacsmirror/gcmh
;; https://www.reddit.com/r/emacs/comments/bg85qm/garbage_collector_magic_hack/
;; (use-package gcmh
;;   :demand t
;;   :init
;;   (gcmh-mode 1)
;;   :config
;;   (setq gcmh-verbose t)
;;   (setq gcmh-high-cons-threshold 1800000))

;; Haskell major mode
(use-package haskell-mode
  :commands haskell-mode)

;; Deft (search through plain-text notes and do other things)
;; https://github.com/jrblevin/deft
(use-package deft
  :commands (deft)
  :bind ((:map global-map
	       ("<f5>" . deft)
	       ("C-x C-n" . deft-find-file)))
  :config
  (setq deft-extensions '("org" "md" "txt"))
  (setq deft-directory "~/Nextcloud/Notes")
  (setq deft-recursive t)
  (setq deft-auto-save-interval 0))

;; TempEL - templating system for Emacs
;; https://github.com/minad/tempel
;; Configure Tempel
(use-package tempel
  :demand t
  ;; Require trigger prefix before template name when completing.
  :custom
  (tempel-trigger-prefix "!")

  :bind (("M-+" . tempel-complete) ;; Alternative tempel-expand
         ("M-*" . tempel-insert)
	 (:map tempel-map
	       ("TAB" . tempel-next)
	       ("<backtab>" . tempel-previous)))

  :init

  ;; Setup completion at point
  (defun tempel-setup-capf ()
    ;; Add the Tempel Capf to `completion-at-point-functions'.
    ;; `tempel-expand' only triggers on exact matches. Alternatively use
    ;; `tempel-complete' if you want to see all matches, but then you
    ;; should also configure `tempel-trigger-prefix', such that Tempel
    ;; does not trigger too often when you don't expect it. NOTE: We add
    ;; `tempel-expand' *before* the main programming mode Capf, such
    ;; that it will be tried first.
    (setq-local completion-at-point-functions
                (cons #'tempel-expand
                      completion-at-point-functions)))

  (add-hook 'prog-mode-hook 'tempel-setup-capf)
  (add-hook 'text-mode-hook 'tempel-setup-capf)

  ;; Optionally make the Tempel templates available to Abbrev,
  ;; either locally or globally. `expand-abbrev' is bound to C-x '.
  ;; (add-hook 'prog-mode-hook #'tempel-abbrev-mode)
  ;; (global-tempel-abbrev-mode)
)

;; Corfu completion UI
;; https://github.com/minad/corfu
(use-package corfu
  ;; Optional customizations
  ;; :custom
  ;; (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  ;; (corfu-auto t)                 ;; Enable auto completion
  ;; (corfu-separator ?\s)          ;; Orderless field separator
  ;; (corfu-quit-at-boundary nil)   ;; Never quit at completion boundary
  ;; (corfu-quit-no-match nil)      ;; Never quit, even if there is no match
  ;; (corfu-preview-current nil)    ;; Disable current candidate preview
  ;; (corfu-preselect-first nil)    ;; Disable candidate preselection
  ;; (corfu-on-exact-match nil)     ;; Configure handling of exact matches
  ;; (corfu-echo-documentation nil) ;; Disable documentation in the echo area
  ;; (corfu-scroll-margin 5)        ;; Use scroll margin

  ;; Enable Corfu only for certain modes.
  :hook ((prog-mode . corfu-mode)
         (shell-mode . corfu-mode))
         ;; (eshell-mode . corfu-mode))

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since Dabbrev can be used globally (M-/).
  ;; See also `corfu-excluded-modes'.
  :init
  (global-corfu-mode))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 3)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))

;; Use Dabbrev with Corfu!
(use-package dabbrev
  ;; Swap M-/ and C-M-/
  :bind (("M-/" . dabbrev-completion)
         ("C-M-/" . dabbrev-expand))
  ;; Other useful Dabbrev configurations.
  :custom
  (dabbrev-ignored-buffer-regexps '("\\.\\(?:pdf\\|jpe?g\\|png\\)\\'")))

;; Make dabbrev completions show in corfu completion UI or company
;; with cape.
;; https://github.com/minad/cape
(use-package cape
  :init
  ;; Add `completion-at-point-functions', used by `completion-at-point'.
  (add-to-list 'completion-at-point-functions #'cape-dabbrev))

;; Emacs everywhere
;; https://github.com/tecosaur/emacs-everywhere
;; (use-package emacs-everywhere)

;; Emacs lightweight language server support (eglot)
;; https://github.com/joaotavora/eglot
(use-package eglot
  :commands (eglot eglot-ensure))
  ;; :init

;; Configuring the flymake package, which is built-in to Emacs.
(use-package flymake
  :bind ((:map flymake-mode-map
	       ("C-," . flymake-goto-prev-error)
	       ("C-." . flymake-goto-next-error)
	       ("M-?" . flymake-show-buffer-diagnostics))))

;; The_Silver_Searcher (ag)
;; Search for text in files quickly.
;; https://github.com/Wilfred/ag.el
(use-package ag
  :commands (ag)
  :bind ((:map global-map ("C-c C-s" . ag))))

;; Elisp bug hunter
;; https://github.com/Malabarba/elisp-bug-hunter
(use-package bug-hunter)

;; Configuring xwidget for Emacs
;; Primarily configuring the xwidget-browser.
(use-package xwidget
  :bind ((:map xwidget-webkit-edit-mode-map
	       ("C-s" . xwidget-webkit-isearch-forward)
	       ("C-r" . xwidget-webkit-isearch-backward))
	 (:map xwidget-webkit-mode-map
	       ("e" . xwidget-webkit-edit-mode)))
  :hook (xwidget-webkit-mode . (lambda () (ctrlf-local-mode -1))))

;; TESTING emacs-webkit (xwidget web browser enhanced functionality)
;; This package is in alpha, and also doesn't seem to be developed actively anymore.
;; (use-package emacs-webkit
;;   :straight '(webkit :type git :host github :repo "akirakyle/emacs-webkit"
;; 		     :branch "main"
;; 		     :files (:defaults "*.js" "*.css" "*.so")
;; 		     :pre-build ("make")))

;; Testing the wucuo package "The fastest solution to spell check camel case code or plain text."
;; https://github.com/redguardtoo/wucuo/
(use-package wucuo
  :bind* ("C-`" . wucuo-mode)
  :init
  (dolist (mode '(org-mode-hook
		  ;; text-mode-hook
		  markdown-mode-hook
		  gfm-mode-hook))
    (add-hook mode (lambda () (wucuo-start)))))

;; Testing the writegood-mode package for checking English readability.
;; https://github.com/bnbeckwith/writegood-mode
;; (use-package writegood-mode
;;   :straight (quote (:type git :host github :repo "bnbeckwith/writegood-mode"))
;;   :bind* (("C-c C-w C-w" . writegood-mode)
;; 	  ("C-c C-w g" . writegood-grade-level)
;; 	  ("C-c C-w e" . writegood-reading-ease))
;;   :hook ((org-mode . writegood-mode)
;; 	 ;; (text-mode . writegood-mode)
;; 	 (markdown-mode . writegood-mode)))

;; Elpy mode, powerful Python mode.
;; https://github.com/jorgenschaefer/elpy
(use-package elpy
  :hook (python-mode . elpy-enable))

;; Iedit mode for editing multiple occurences of something..
;; I am using it for Python variables etc..
;; It's a better way to change multiple occurences of something
;; rather than multiple-cursors which is a bit clunky.
;; https://github.com/victorhge/iedit
(use-package iedit
  :bind (("C-;" . iedit-mode)
	 ("C-c ;" . iedit-mode)))

;; EMMS configuration
;; (use-package emms
;;   ;; :commands
;;   :bind (("C-c m p" . emms-player-mpd-pause)
;; 	 ("C-c m f" . emms-player-mpd-next)
;; 	 ("C-c m b" . emms-player-mpd-previous)
;; 	 ("C-c m s" . emms-seek-to)
;; 	 ("C-c m r t" . emms-toggle-repeat-track)
;; 	 ("C-c m r p" . emms-toggle-repeat-playlist)
;; 	 ("C-c m v" . emms-volume-minor-mode))
;;   :config
;;   (emms-all)
;;   (emms-default-players)

;;   (setq emms-source-file-default-directory "~/Music")

;;   ;; EMMS mpd support configuration
;;   (setq emms-player-mpd-server-name "192.168.1.100"
;; 	emms-player-mpd-server-port "6600")

;;   (add-to-list 'emms-info-functions 'emms-info-mpd)
;;   (add-to-list 'emms-player-list 'emms-player-mpd)
  
;;   ;; Actually connect EMMS to MPD (can view MPD playlist in `emms-browser')
;;   (emms-player-mpd-connect))

;; Avy-goto-char -- Jump to characters in a buffer with keys
;; https://github.com/abo-abo/avy
(use-package avy
  :commands avy-goto-char
  :bind ("C-~" . avy-goto-char))

;; Smartparens mode -- Minor mode for Emacs that deals with parens pairs and tries to be smart about it.
;; https://github.com/Fuco1/smartparens
(use-package smartparens
  :demand t
  :hook ((prog-mode . smartparens-mode)
	 ;; Strict parens for Emacs Lisp mode
	 (emacs-lisp-mode . smartparens-strict-mode)
	 (lisp-mode . smartparens-strict-mode))
  :bind ((:map smartparens-mode-map
	       ("C-M-d" . sp-splice-sexp)
	       ("C-M-k" . sp-kill-sexp)
	       ("C-k" . sp-kill-hybrid-sexp)
	       ("C-j" . sp-newline)

	       ("C-M-f" . sp-forward-sexp)
	       ("C-M-b" . sp-backward-sexp)
	       ("C-M-n" . sp-next-sexp)
	       ("C-M-p" . sp-previous-sexp)
	       ("C-S-f" . sp-forward-symbol)
	       ("C-S-b" . sp-backward-symbol)

	       ;; Slurping/barfing s-expressions
	       ;; I.e adding brackets around sexp's in an intelligent way and
	       ;; removing brackets from around sexp's in an intelligent way.
	       ("C-<right>" . sp-forward-slurp-sexp)
	       ("C-<left>" . sp-backward-slurp-sexp)
	       ("M-<right>" . sp-forward-barf-sexp)
	       ("M-<left>" . sp-backward-barf-sexp)

	       ;; Unwrapping sexps (yet to find somethign that rewraps sexp's, this might help:
	       ;;                   https://ebzzry.com/en/emacs-pairs/#unwrapping)
	       ("M-[" . sp-backward-unwrap-sexp)
	       ("M-]" . sp-unwrap-sexp)

	       ("M-i" . sp-change-inner)
               
	       ("M-;" . sp-comment)

	       ("C-c p" . smartparens-strict-mode)))
  :config
  (setq sp-pairs (quote ((t
			  (:open "\\\\(" :close "\\\\)" :actions
				 (insert wrap autoskip navigate))
			  (:open "\\{" :close "\\}" :actions
				 (insert wrap autoskip navigate))
			  (:open "\\(" :close "\\)" :actions
				 (insert wrap autoskip navigate))
			  (:open "\\\"" :close "\\\"" :actions
				 (insert wrap autoskip navigate))
			  (:open "\"" :close "\"" :actions
				 (insert wrap autoskip navigate escape)
				 :unless
				 (sp-in-string-quotes-p)
				 :post-handlers
				 (sp-escape-wrapped-region sp-escape-quotes-after-insert))
			  ;; (:open "'" :close "'" :actions
			  ;; (insert wrap autoskip navigate escape)
			  ;; :unless
			  ;; (sp-in-string-quotes-p sp-point-after-word-p)
			  ;; :post-handlers
			  ;; (sp-escape-wrapped-region sp-escape-quotes-after-insert))
			  (:open "(" :close ")" :actions
				 (insert wrap autoskip navigate))
			  (:open "[" :close "]" :actions
				 (insert wrap autoskip navigate))
			  (:open "{" :close "}" :actions
				 (insert wrap autoskip navigate))
			  (:open "`" :close "`" :actions
				 (insert wrap autoskip navigate)))))))

;; Go-translate translation package which supports multiple translation engines like Google translate, Bing, Deepl..
;; https://github.com/lorniu/go-translate
(use-package go-translate
  :commands gts-do-translate
  :config
  (setq gts-translate-list '(("fr" "en") ("ru" "en")))

  (setq gts-default-translator
	(gts-translator
	 :picker (gts-prompt-picker)
	 :engines (list (gts-bing-engine) (gts-google-engine))
	 :render (gts-buffer-render))))

;; FVWM mode
;; https://github.com/theBlackDragon/fvwm-mode
(use-package fvwm-mode
  :straight (fvwm-mode :type git :host github
		       :repo "theBlackDragon/fvwm-mode")
  :commands fvwm-mode)

;; Support for interactive programming in Common Lisp, SLIME.
;; I'm using it to hack StumpWM which is written in Common Lisp and has a Common Lisp REPL.
;; https://melpa.org/#/slime
;; (use-package slime
;;   :commands slime)

;; Support for interactive programming in Common Lisp, SLY - a fork of SLIME.
;; I'm using it to hack StumpWM which is written in Common Lisp and has a Common Lisp REPL.
;; https://melpa.org/#/sly
(use-package sly
  :commands sly-connect
  :init
  (setq inferior-lisp-program "/usr/local/bin/sbcl"))

;; StumpWM-mode for interacting with StumpWM to evaluate parts of the StumpWM config
;; file while it is running.
;; [I only use this package as a fallback incase SLY in unavailable.]
;; https://melpa.org/#/stumpwm-mode
(use-package stumpwm-mode
  :hook (lisp-mode . stumpwm-mode))

;; VTERM
;; Emacs-libvterm (vterm) is fully-fledged terminal emulator inside GNU Emacs based on libvterm, a C library.
;; As a result of using compiled code (instead of elisp), emacs-libvterm is fully capable, fast,
;; and it can seamlessly handle large outputs.
;; https://github.com/akermu/emacs-libvterm
(use-package vterm
  :commands vterm
  :config
  (push (list "find-file-below"
	      (lambda (path)
		(if-let* ((buf (find-file-noselect path))
			  (window (display-buffer-in-side-window buf '((side . bottom)))))
		    (select-window window)
		  (message "Failed to open file: %s" path))))
	vterm-eval-cmds))

;; https://github.com/magnars/expand-region.el
(use-package expand-region
  :commands er/expand-region
  :bind (("C-S-SPC" . er/expand-region)))

(use-package change-inner
  :config
  (global-set-key (kbd "M-i") 'change-inner)
  (global-set-key (kbd "M-o") 'change-outer))

;; NovEL Epub reader
(use-package nov
  :commands nov-mode)

;; Display keybinds after pressing prefix key.
;; Can help if you forgot a keybind.
;; https://github.com/justbur/emacs-which-key#install
(use-package which-key
  :demand t
  :bind ((:map which-key-mode-map
	       ("C-x M-h" . which-key-C-h-dispatch)
	       ("C-c M-h" . which-key-C-h-dispatch)))
  ;; :commands which-key-mode
  :config
  ;; Disable which-key paging help with C-h
  (setq which-key-use-C-h-commands nil)
  ;; Allow C-h to trigger which-key before it is done automatically
  (setq which-key-show-early-on-C-h nil)
  ;; make sure which-key doesn't show normally but refreshes quickly after it is
  ;; triggered.
  (setq which-key-idle-delay 2)
  (setq which-key-idle-secondary-delay 0.05)
  (which-key-mode))

;; Distinguish buffers by their darker / lighter colours.
;; Solaire-mode "dims" the buffers that aren't the "main ones" like
;; a terminal / help buffer from an actual file buffer.
;; This is an aesthetic package.
;; https://github.com/hlissner/emacs-solaire-mode
(use-package solaire-mode
  :config
  (solaire-global-mode t))

;; Focus mode, dim text of surrounding paragraphs, sentences
;; code-blocks etc.. when moving to the next.
;; https://github.com/larstvei/Focus
(use-package focus
  :bind (("C-c F" . focus-mode)))

;; Enable richer annotations using the Marginalia package
;; https://github.com/minad/marginalia
(use-package marginalia
  ;; Either bind `marginalia-cycle` globally or only in the minibuffer
  :bind (("M-A" . marginalia-cycle)
         (:map minibuffer-local-map
               ("M-A" . marginalia-cycle)))

  ;; The :init configuration is always executed (Not lazy!)
  :init

  ;; Must be in the :init section of use-package such that the mode gets
  ;; enabled right away. Note that this forces loading the package.
  (marginalia-mode))

;; Aggressive indent mode, keep lines automatically indented.
;; https://github.com/Malabarba/aggressive-indent-mode
(use-package aggressive-indent
  :hook ((emacs-lisp-mode . aggressive-indent-mode)
	 (lisp-mode . aggressive-indent-mode)
	 (sh-mode . aggressive-indent-mode)))

;; A Collection of Ridiculously Useful eXtensions for Emacs.
;; crux bundles many useful interactive commands
;; to enhance your overall Emacs experience.
;; https://github.com/bbatsov/crux
(use-package crux
  :bind ((:map ctl-x-4-map
	       ("t" . crux-transpose-windows))))

;; Embark -- actions for the thing at point.
;; https://github.com/oantolin/embark
(use-package embark
  :bind
  (("C-." . embark-act)         ;; pick some comfortable binding
   ("C-x A" . embark-act)
   ("C-#" . embark-dwim)        ;; good alternative: M-.
   ("C-h B" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; Optionally replace the key help with a completing-read interface
  ;; Can replace the `which-key' package too.
  (setq prefix-help-command #'embark-prefix-help-command)

  :config

  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))

;; Consult users will also want the embark-consult package.
(use-package embark-consult
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
